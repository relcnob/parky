import { type NextPage } from "next";
import { DashboardWrapper } from "~/components/DashboardWrapper/DashboardWrapper";
import { type RouterInputs, api } from "~/utils/api";
import toast from "react-hot-toast";
import { type SubmitHandler, useForm } from "react-hook-form";
import styles from "./index.module.scss";
import { useUser } from "@clerk/nextjs";
import { InputField } from "~/components/FormElements/InputField/InputField";
import { DashboardFooter } from "~/components/DashboardElements/components/DashboardFooter/DashboardFooter";
import Link from "next/link";
import { UiBox } from "~/components/uiBox/uiBox";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
const TopUp: NextPage = () => {
  const [selectedAmount, setSelectedAmount] = useState<number | string>();
  const ctx = api.useContext();
  const user = useUser();
  const { mutate: addCoin, error } = api.coin.addCoin.useMutation({
    onSuccess: (e) => {
      toast.success("Transaction complete");
      void ctx.profile.getProfileById.invalidate();
    },
    onError: () => {
      toast.error("Something went wrong");
    },
  });
  const { register, handleSubmit, watch } =
    useForm<RouterInputs["coin"]["addCoin"]>();

  const onSubmit: SubmitHandler<RouterInputs["coin"]["addCoin"]> = (data) => {
    if (user.user && selectedAmount === "custom") {
      addCoin({ ...data, toAccountId: user.user.id });
    } else if (
      user.user &&
      typeof selectedAmount === "number" &&
      selectedAmount
    ) {
      addCoin({ amount: selectedAmount, toAccountId: user.user.id });
    }
  };

  return (
    <>
      <Head>
        <title>Top up | Parky</title>
        <meta name="Help page" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>
      <DashboardWrapper active="top-up">
        <>
          <div className={styles.contentWrapper}>
            <h2>Account top up</h2>
            <UiBox className={styles.formWrapper}>
              <h4>Purchase ParCoin</h4>
              <p>
                To top up your account please select the amount of ParCoin and
                proceed.
              </p>
              {/*eslint-disable-next-line */}
              <form onSubmit={handleSubmit(onSubmit)}>
                <section className={styles.packageSelector}>
                  <div
                    className={selectedAmount === 10 ? styles.selected : ""}
                    onClick={() => {
                      setSelectedAmount(10);
                    }}
                  >
                    <span>
                      <h3>10</h3>
                      <Image
                        src="/icon/parkcoin-filled.svg"
                        width={24}
                        height={24}
                        alt="parcoin icon"
                      />
                    </span>
                    <p>100 DKK</p>
                  </div>
                  <div
                    className={selectedAmount === 25 ? styles.selected : ""}
                    onClick={() => {
                      setSelectedAmount(25);
                    }}
                  >
                    <span>
                      <h3>25</h3>
                      <Image
                        src="/icon/parkcoin-filled.svg"
                        width={24}
                        height={24}
                        alt="parcoin icon"
                      />
                    </span>
                    <p>250 DKK</p>
                  </div>
                  <div
                    className={selectedAmount === 100 ? styles.selected : ""}
                    onClick={() => {
                      setSelectedAmount(100);
                    }}
                  >
                    <span>
                      <h3>100</h3>
                      <Image
                        src="/icon/parkcoin-filled.svg"
                        width={24}
                        height={24}
                        alt="parcoin icon"
                      />
                    </span>
                    <p>1000 DKK</p>
                  </div>
                  <div
                    className={selectedAmount === 250 ? styles.selected : ""}
                    onClick={() => {
                      setSelectedAmount(250);
                    }}
                  >
                    <span>
                      <h3>250</h3>
                      <Image
                        src="/icon/parkcoin-filled.svg"
                        width={24}
                        height={24}
                        alt="parcoin icon"
                      />
                    </span>
                    <p>2500 DKK</p>
                  </div>
                  <div
                    className={selectedAmount === 500 ? styles.selected : ""}
                    onClick={() => {
                      setSelectedAmount(500);
                    }}
                  >
                    <span>
                      <h3>500</h3>
                      <Image
                        src="/icon/parkcoin-filled.svg"
                        width={24}
                        height={24}
                        alt="parcoin icon"
                      />
                    </span>
                    <p>5000 DKK</p>
                  </div>
                  <div
                    className={
                      selectedAmount === "custom" ? styles.selected : ""
                    }
                    onClick={() => {
                      setSelectedAmount("custom");
                    }}
                  >
                    <InputField
                      register={register}
                      name="amount"
                      label="Custom amount"
                      inputType="number"
                      placeholder="Insert coin amount"
                      min={1}
                      error={
                        watch("amount") < 1
                          ? "Please insert a valid amount."
                          : error?.data?.zodError?.fieldErrors["amount"]?.at(0)
                      }
                    />
                  </div>
                </section>
                <input
                  type="submit"
                  className={styles.primary}
                  value="Proceed"
                  disabled={user.isLoaded ? false : true}
                />
              </form>
            </UiBox>
            <UiBox>
              <h4>Having trouble?</h4>
              <p>
                If you run into any problems with the top up processs, please{" "}
                <Link href="/contact">Contact us</Link>.
              </p>
            </UiBox>
            <UiBox className={styles.quickAccess}>
              <h4>Quick access</h4>
              <ul>
                <li>
                  <Link href="/">Home</Link>
                </li>
                <li>
                  <Link href="/map">Book a parking spot</Link>
                </li>
                <li>
                  <Link href="/get-benefits">Get benefits</Link>
                </li>
                <li>
                  <Link href="/balance">Balance overview</Link>
                </li>
              </ul>
            </UiBox>
            <DashboardFooter>
              <ul>
                <li>
                  <Link href="/contact">Contact</Link>
                </li>
                <li>
                  <Link href="/help">Help</Link>
                </li>
              </ul>
            </DashboardFooter>
          </div>
        </>
      </DashboardWrapper>
    </>
  );
};

export default TopUp;
